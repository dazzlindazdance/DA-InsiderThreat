[Threat - Insider - Email Attachment Exceeds Acceptable Size - Rule]
action.correlationsearch.annotations = {}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Insider - Email Attachment Exceeds Acceptable Size
action.customsearchbuilder.enabled = false
action.customsearchbuilder.spec = {}
action.email.show_password = 1
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.insider_risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"user","risk_object_type":"user","risk_score":25}]
action.risk.param._risk_message = Email attachment exceeds 16Kb
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = src_user,recipient,file_name,file_size,subject
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = */5 * * * *
description = Insider Demo Usecase, alert where attachments exceed 16KB, RBA
dispatch.earliest_time = -24h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
schedule_window = auto
# Dummy Search
search = index=main sourcetype=sample_email action=delivered file_name=*|where file_size>16384 |stats count by _time,src_user,recipient,file_name,file_size,subject| fields - count |  rename src_user AS user

[Threat - Insider - User sending emails to free domains - Rule]
action.correlationsearch.annotations = {}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Insider - User sending emails to free domains
action.customsearchbuilder.enabled = false
action.customsearchbuilder.spec = {}
action.email.show_password = 1
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.insider_risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"src_user","risk_object_type":"user","risk_score":10}]
action.risk.param._risk_message = User Sending Emails to Free Email Domains
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 4 */1 * * *
dispatch.earliest_time = -120m
dispatch.latest_time = -60m
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
schedule_window = auto
# Dummy Search
search = index=main sourcetype=sample_email action=delivered | rex field=recipient "\@(?<recipient_domain>[^\$]+)" | lookup free_email_domains.csv domain AS recipient_domain OUTPUT domain AS recipient_free_domain| where isnotnull(recipient_free_domain)| stats count,values(subject) AS subject by src_user,recipient | addinfo

[Threat - Insider - User sending to a personal email account - Rule]
# This use case requires identity information to be populated in ES
action.correlationsearch.annotations = {}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Insider - User sending to a personal email account
action.customsearchbuilder.enabled = false
action.customsearchbuilder.spec = {}
action.email.show_password = 1
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.insider_risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"src_user","risk_object_type":"user","risk_score":80}]
action.risk.param._risk_message = User Sending to Personal Email Address
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 6 */1 * * *
dispatch.earliest_time = -120m
dispatch.latest_time = -60m
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
schedule_window = auto
# Dummy Search
search = index=main sourcetype=sample_email action=delivered | rex field=recipient "^(?<recipient_prefix>[^\@]+)" | eval recipient_match=if(match(src_user_identity,recipient_prefix),1,0) ```make this do part matching too so that i can pickup name followed by number or similar``` ```extend this out by looking at non-corporate domains```| where recipient_match=1 | stats count,values(file_name) AS file_name,sum(file_size) AS file_size by _time,src_user,recipient,subject| fields - count

[Threat - Insider - Blocked delivery followed by successful delivery - Rule]
action.correlationsearch.annotations = {}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Insider - Blocked delivery followed by successful delivery
action.customsearchbuilder.enabled = false
action.customsearchbuilder.spec = {}
action.email.show_password = 1
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable = 1
action.notable.param.drilldown_name = Logs relating to the successful delivery to $recipient$
action.notable.param.drilldown_search = index=main sourcetype=sample_email action=delivered OR action=blocked recipient=$recipient$
action.notable.param.rule_description = A user successfully sent an email after it had already been blocked on at least 1 attempt
action.notable.param.rule_title = Insider (121approach) - $src_user$ successfully sent an email after it had been blocked
action.notable.param.security_domain = threat
action.notable.param.severity = high
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.insider_risk = 1
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"src_user","risk_object_type":"user","risk_score":100}]
action.risk.param._risk_message = User has successfully delivered a previously blocked message
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 1
alert.suppress.fields = src_user,recipient,delivered_file_name,subject,first_delivered_time
alert.suppress.period = 86400s
alert.track = 1
counttype = number of events
cron_schedule = 9 */1 * * *
description = Insider usecase that looks for a blocked email delivery followed by a successful one assuming sender, recipient and subject remain the same
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
schedule_window = auto
# Dummy Search
search = index=main sourcetype=sample_email action=delivered OR action=blocked |eval blocked_time=if(action="blocked",_time,null),delivered_time=if(action="delivered",_time,null)| stats min(delivered_time) AS first_delivered_time,max(blocked_time) AS latest_blocked_time,sum(file_size) AS file_size,values(eval(if(action="blocked",file_name,null))) AS blocked_file_name,values(eval(if(action="delivered",file_name,null))) AS delivered_file_name by src_user,recipient,subject| where first_delivered_time>latest_blocked_time| eval _time=first_delivered_time | convert ctime(first_delivered_time) AS first_delivered_time,ctime(latest_blocked_time) AS latest_blocked_time

[Threat - Insider - User Sending Emails to Probable Programatic Generated Domain - Rule]
# requires URL tool box to be installed
action.correlationsearch.annotations = {}
action.correlationsearch.enabled = 1
action.correlationsearch.label = Insider - User Sending Emails to Probable Programatic Generated Domain
action.customsearchbuilder.enabled = false
action.customsearchbuilder.spec = {}
action.email.show_password = 1
action.insider_risk = 1
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk = 0
action.risk.forceCsvResults = 1
action.risk.param._risk = [{"risk_object_field":"src_user","risk_object_type":"user","risk_score":100}]
action.risk.param._risk_message = $src_user$ sent an email to a domain that may of been programatically generated
action.risk.param._risk_score = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = */9 * * * *
description = An Insider Risk modification search that raises risk when an email is sent to a domain that may of been programatically generated.
dispatch.earliest_time = -129m
dispatch.latest_time = -9m
dispatch.rt_backfill = 1
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = SplunkEnterpriseSecuritySuite
schedule_window = auto
# Dummy Search
search = index=main sourcetype=sample_email action=delivered | rex field=recipient "^(?<recipient_prefix>[^\@]+)\@(?<recipient_domain>[^\$]+)"| `ut_shannon(recipient_domain)` | where ut_shannon>3 | stats count,values(file_name) AS filename,sum(file_size) AS file_size by _time,src_user,recipient,subject